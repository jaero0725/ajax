지금 배우지만 당장 써먹을 일은 없다 -> 나중에 프로젝트에서 많이 써먹는다
3일전도 하고 마지막날에 스프링 세팅
스프링 부트는 수업을 책으로 사서 
21일날 스프링이 끝나면 2주동안 스프링 부트 
스프링 부트 할때부터 프로젝트 시작 (3월 29일부터)
-----------------------------------------------------------------------------------------------------------------

제 11 강 Ajax란 무엇인가?(pdf랑 같이 볼 것)

Ajax = Asynchronous JavaScript and XML
비동기 방식의 자바스크립트와 XML
기존의 자바 스크립트하고 XML을 썼는데 비동기 방식으로 써보자

웹 어플리케이션 구축의 패러다임을 변경
2006년도에 나오는데 web에 혁명을 일으킴
2004년 프레임워크(strut/ibatis/Spring)
2008년에 JQuery

웹의 방향을 확 바꿈

클라이언트하고 서버하고 동신하는데 있어서 자바스크립트를 이용해보자
	이때 xml을 주고 받는데 최근에는 JSON

※ 기존의 방식
클라이언트가 요청 -> 값을 가지고 서버로 HTML을 만들면 코드를 쏴주고 브라우저가 화면을 보이는
		서버쪽에서 전체 코드를 쏴줘서 화면이 다 바뀌는
	수1:______5______ ---------------------5, 3------------------>서버가계산하고 다시 코드를 다 쏘는
	수2:______3______
	       계산
	결과_____8_______
 화면 리로딩 하면 전송하는 양도 많고 데이터를 전부 보내야한다
 => 다 쏘지말고 결과값만 쏴주면 안돼??? 

※ 장점
페이지 이동 없이 고속으로 화면 전환
서버 처리를 기다리지 않고 비동기 요청이 가능
서버 측 처리를 각 PC에 분산 가능
수신하는 데이터의 양 줄임

※ 단점
보안에 더욱 신경을 써야한다

DOM - DocumnetObjectModel
화면 전체만 바꾸는게 아니라 추가되는 기술만 바꿔주는
WEB은 Ajax를 안쓰면 뭘 할 수가 없다
	 로그인 하면 한 부분만 ~님 환영합니다 이런식
-----------------------------------------------------------------------------------------------------------------
★깃 하고 깃허브

프로젝트를 할려면 서버가 있어야 한다

그래서 어떻게하냐? -> 서버를 하나 사자
	AWS
	Web SErver

	RDB

① RDB 먼저 

SVN 중앙저장소는 서버끊기면 아무것도 못함
Github - 원격저장소 로컬조장소에 저장한걸 당겨오는 

Git - GUI로 만든게 
	[SourceTree]
	GUI로 안 만들면 콘솔에서 일일히 쳐야 한다

리눅스토발즈가 리눅스를 관리할려고 3일 동안 만든게 깃허브

외국같은거 진출을 생각하는 사람은 이런거를 관리를 잘해야 한다
	실리콘 벨리에서 더이상 이력서를 안받고 
	깃허브 아이디를 달라고 나온다
	코딩을 몇라인을 했고 
	이 프로젝트에 몇 프로를 기여했는지

우리나라의 경우 아직까지 SVN 중앙저장소를 쓰는 방식이 더 많은
	중앙집중 방식은 진짜 서버가 있어야 한다

소스공유는 깃허브
DB공유는 RDB
나머지는 AWS에 올려서
-----------------------------------------------------------------------------------------------------------------
※ XMLHttpRequest 프로그래밍 순서
1. XMLHttpRequest객체 구하기
2. 웹서버에 요청 전송하기
	알아야 될 메서드
	open() : 요청하는 방식에 대한 설정
		세개의 인자를 전달 받는데 get/post방식 , 접속할URL, 동기/비동기(true하면 비동기)
		get방식일때는 send에 늘 null
	send() : 얘가 보내기
		open을 통해서 설정을 하고 send를 통해서 보내는
3. 웹서버에서 응답이 도착하면 화면에 변경

★ 서버에서의 응답처리메서드 
	onreadystatechange 프로퍼티 
	readyState 프로퍼티
	responseText 프로퍼티
	responseXML 프로퍼티
	responseBody 프로퍼티
	status 프로퍼티

callBackFunction 하면 특정 상황/환경이 되면 동작하는 함수 (내가 부르지 않아도) 

※ 지금까지 내용정리★
사용자가 이벤틀르 발생하면 이벤트 처리 함수를 호출
이벤트 처리 함수에서는 XMHttpRequest 객체의 send()함수를 호출
웹 서버는 알맞게 처리한 뒤 응답 결과를 XMLHttpRequest에 전송
XMLHttpRequest 객체에 응답이 도착하면 onreadystatechange프로퍼티에 지정한 콜백 함수를 호출

JSP의 경우 어떤거인지 지정이 가능한데 txt는 지정할 방법이 없기 때문에 UTF-8

※ 동기/비동기 방식의 차이
void main(){		
	...1
	aaa();
	...2
	...3
}

void aaa(){
	4	
	5
	6
}

1-> 4-> 5-> 6-> 2-> 3 => 동기 방식
비동기방식은? 기본적으로 왼쪽에서 오른쪽으로 가긴 하는데 
	호출해놓고 각자 간다 1-> 2 ->3
			        4-> 5-> 6
	기본적으로 동시에 간다
	자바스크립트에 스레드가 없는데 그걸 비슷하게 구현한

자바스크립트는 문자열을 UTF-8로 인코딩해주는 함수인 encodeURIComponent()함수가 있다

※ XMLHttpRequest.js(모듈로 만드는)
/*Ajax용 모듈*/

모듈을 하나 만들고 오타가 없다면 

Ajax는 클라이언트측과 서버측을 나눠서 생각해야 한다

이렇게 모듈을 만들어서 쓰면 
브라우저 특성들을 분리해서

이거는 작업이 나눠서 간다
프론트하고 벡이 약속이 되어있어야 한다

쫘주는 형식에 맞춰서 데이터를 날려주는

1장에서는 보내고 받고
아직 서버에선 한게 없다
-----------------------------------------------------------------------------------------------------------------
제 12 강 innerHTML을 이용한 화면 동적변경
사용자가 이벤트를 발생시키면 웹서버에서 데이터를 전송
웹 서버가 생성한 응답 결과를 바탕으로 화면을 조작한다

웹브라우저에서 화면을 조작하는 방법
1. innerHTML이용하는 방식
2. DOM을 이용해서 하는 방식 -> 나중에 배움

getElementById : 엘리먼트를 ID에 의해서 얻어오겠다
어떤 태그 안에 있는 모든 요소들이 innerHTML이 될 수 있다


※ 웹서버에서 응답 결과를 innerHTML을 사용하여 반영
서버에서 받은 것을 내가 원하는 위치에 쏴줄 수 있다

※ 종합예제 : 제시어 기능 구현하기
1. 한글자만 치면 입력한 검색어를 서버에 전송
2. 전달받은 검색어를 사용해서 제시어 목록을 추출
3. 제시어 목록을 지정한 양식으로 클라이언트에 전송
4. 응답 텍스트를 분석한 뒤 제시어 목록을 화면에 출력

요즘에 브라우저가 웹캐시라고 해서 캐시에다가 저장된 글자를 띄우는 
	포맷하고 글자 치면 안 나온다
-----------------------------------------------------------------------------------------------------------------
제 13 강 Documnet Object Model 과 XML(pdf위주로 볼것)
1. DOM(Documnet Object Model)
문서를 객체로 표현할때 사용되는 API 
표준이여서 다 사용 가능하다
XML (extend markup language)로 정의를 할 수 있다
	데이터를 전송하는 방법론이 xml

문서 전체를 나타내는게 documnet

보통 자바스크립트에서 폼 검등을 할때 document. 이런식으로 

DOM API에서 모든 건 Node로 표현되며 문서의 각 구성 요소들은 모두 node
	Element는 태그

NodeList는 -ArrayLIst라고 생각


※ Document 인터페이스의 주요 프로퍼티 및 함수
document.documentElement는 문서의 추트 노드인 HTML

진짜 복잡한거 있으면 어떻게 찾아가냐? 
★ Nodeist getElementByTagName(String tagname) : 지정한 이름의 태그에 해당하는 모든 Element의 목록을 구한다
★ Element getElementById(String elementId) : id 속성값이 elementId인 태그를 구한다

※ log.js
/*자바에서 System.out.println()을 대체하기 위해서 만든것*/

문서의 구조 탐색은 알겠으나 타고 들어가는 게 쉽지 않다

※ DOM API를 사용하여 문서 구조를 변경하기
① Document 인터페이스의 Element 노드 생성 함수(우리 눈에는 안보인다)
Element createElement(String tagName)  : 지정한 태그 이름을 갖는 Element 노드를 생성
Text createText(String text) : text를 값으로 갖는 text노드를 생성한다

잘 따라서 화면 충분히 할 수 있다...(pdf위주로 할것)

※ changeUsingDOM.html

<div id='item_1'>
	새로 추가된 아이쳄['1'][삭제]
		<input type='button' value='삭제' onclick="removeItem('1')"/>
</div>

※ XML 응답
원래 xml을 쓸려면 DTD(Document Type Definition)를 정의하고 써야 한다
xml을 받아서 보내준다
기상청에서 이런식으로 보내준다

=> 형식를 알아야한다

※ XSL/T : XML을 HTML로 변환하는 형식

★ DOM트리와 주요메서드는 꼭 알아야 한다